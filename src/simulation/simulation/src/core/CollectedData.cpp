#include "CollectedData.hpp"

// s_data.altitudeBarometer     = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ALTITUDE_BAROMETER>();     // 1 Hz, 0
// s_data.altitudeOfHomepoint   = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ALTITUDE_OF_HOMEPOINT>();  // 1 Hz, 0
// s_data.altitudeFusioned      = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ALTITUDE_FUSIONED>();     // 10 Hz, 1
// s_data.latLonFused           = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_FUSED>();             // 10 Hz, 1
// s_data.gpsControlLevel       = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_CONTROL_LEVEL>();     // 10 Hz, 1
// s_data.batteryInfo           = p_vehicle->subscribe->getValue<Telemetry::TOPIC_BATTERY_INFO>();          // 10 Hz, 1
// s_data.gpsDate               = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_DATE>();               // 5 Hz, 2
// s_data.gpsTime               = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_TIME>();               // 5 Hz, 2
// s_data.gpsPosition           = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_POSITION>();           // 5 Hz, 2
// s_data.gpsVelocity           = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_VELOCITY>();           // 5 Hz, 2
// s_data.gpsDetails            = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_DETAILS>();            // 5 Hz, 2
// s_data.gpsSignalLevel        = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GPS_SIGNAL_LEVEL>();       // 5 Hz, 2
// s_data.controlDevice         = p_vehicle->subscribe->getValue<Telemetry::TOPIC_CONTROL_DEVICE>();         // 5 Hz, 2
// s_data.hardSync              = p_vehicle->subscribe->getValue<Telemetry::TOPIC_HARD_SYNC>();              // 5 Hz, 2
// s_data.homePointInfo         = p_vehicle->subscribe->getValue<Telemetry::TOPIC_HOME_POINT_INFO>();        // 5 Hz, 2
// s_data.statusFlight          = p_vehicle->subscribe->getValue<Telemetry::TOPIC_STATUS_FLIGHT>();          // 5 Hz, 2
// s_data.statusDisplayMode     = p_vehicle->subscribe->getValue<Telemetry::TOPIC_STATUS_DISPLAYMODE>();     // 5 Hz, 2
// s_data.statusLandingGear     = p_vehicle->subscribe->getValue<Telemetry::TOPIC_STATUS_LANDINGGEAR>();     // 5 Hz, 2
// s_data.statusMotorStartError = p_vehicle->subscribe->getValue<Telemetry::TOPIC_STATUS_MOTOR_START_ERROR>();//5 Hz, 2
// s_data.statusRtkConnect      = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RTK_CONNECT_STATUS>();     // 5 Hz, 2
// s_data.statusHomePointSet    = p_vehicle->subscribe->getValue<Telemetry::TOPIC_HOME_POINT_SET_STATUS>();  // 5 Hz, 2
// s_data.gimbalStatus          = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GIMBAL_STATUS>();          // 5 Hz, 2
// s_data.quaternion            = p_vehicle->subscribe->getValue<Telemetry::TOPIC_QUATERNION>();            // 50 Hz, 3
// s_data.accelerationGround    = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ACCELERATION_GROUND>();   // 50 Hz, 3
// s_data.accelerationBody      = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ACCELERATION_BODY>();     // 50 Hz, 3
// s_data.accelerationRaw       = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ACCELERATION_RAW>();      // 50 Hz, 3
// s_data.velocity              = p_vehicle->subscribe->getValue<Telemetry::TOPIC_VELOCITY>();              // 50 Hz, 3
// s_data.angularRateFusioned   = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ANGULAR_RATE_FUSIONED>(); // 50 Hz, 3
// s_data.angularRateRaw        = p_vehicle->subscribe->getValue<Telemetry::TOPIC_ANGULAR_RATE_RAW>();      // 50 Hz, 3
// s_data.heightFusioned        = p_vehicle->subscribe->getValue<Telemetry::TOPIC_HEIGHT_FUSION>();         // 50 Hz, 3
// s_data.compass               = p_vehicle->subscribe->getValue<Telemetry::TOPIC_COMPASS>();               // 50 Hz, 3
// s_data.rc                    = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RC>();                    // 50 Hz, 3
// s_data.positionVO            = p_vehicle->subscribe->getValue<Telemetry::TOPIC_POSITION_VO>();           // 50 Hz, 3
// s_data.flightAnomaly         = p_vehicle->subscribe->getValue<Telemetry::TOPIC_FLIGHT_ANOMALY>();        // 50 Hz, 3
// s_data.avoidData             = p_vehicle->subscribe->getValue<Telemetry::TOPIC_AVOID_DATA>();            // 50 Hz, 3
// s_data.gimbalAngles          = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GIMBAL_ANGLES>();         // 50 Hz, 3
// s_data.gimbalControlMode     = p_vehicle->subscribe->getValue<Telemetry::TOPIC_GIMBAL_CONTROL_MODE>();   // 50 Hz, 3
// if(m_rtkAvailable) {
//     s_data.rtkPosition       = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RTK_POSITION>();           // 5 Hz, 4
//     s_data.rtkVelocity       = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RTK_VELOCITY>();           // 5 Hz, 4
//     s_data.rtkYaw            = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RTK_YAW>();                // 5 Hz, 4
//     s_data.rtkPositionInfo   = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RTK_POSITION_INFO>();      // 5 Hz, 4
//     s_data.rtkYawInfo        = p_vehicle->subscribe->getValue<Telemetry::TOPIC_RTK_YAW_INFO>();           // 5 Hz, 4
// }

bool CollectedData::operator==(const CollectedData& rhs) const {
    if (
    // 50 Hz
        this->quaternion.q0 != rhs.quaternion.q0 or
        this->quaternion.q1 != rhs.quaternion.q1 or
        this->quaternion.q2 != rhs.quaternion.q2 or
        this->quaternion.q3 != rhs.quaternion.q3 or
        this->accelerationGround.x != rhs.accelerationGround.x or
        this->accelerationGround.y != rhs.accelerationGround.y or
        this->accelerationGround.z != rhs.accelerationGround.z or
        this->accelerationBody.x != rhs.accelerationBody.x or
        this->accelerationBody.y != rhs.accelerationBody.y or
        this->accelerationBody.z != rhs.accelerationBody.z or
        this->accelerationRaw.x != rhs.accelerationRaw.x or
        this->accelerationRaw.y != rhs.accelerationRaw.y or
        this->accelerationRaw.z != rhs.accelerationRaw.z or
        this->velocity.data.x != rhs.velocity.data.x or
        this->velocity.data.y != rhs.velocity.data.y or
        this->velocity.data.z != rhs.velocity.data.z or
        this->angularRateFusioned.x != rhs.angularRateFusioned.x or
        this->angularRateFusioned.y != rhs.angularRateFusioned.y or
        this->angularRateFusioned.z != rhs.angularRateFusioned.z or
        this->angularRateRaw.x != rhs.angularRateRaw.x or
        this->angularRateRaw.y != rhs.angularRateRaw.y or
        this->angularRateRaw.z != rhs.angularRateRaw.z or
        this->heightFusioned != rhs.heightFusioned or
        this->compass.x != rhs.compass.x or
        this->compass.y != rhs.compass.y or
        this->compass.z != rhs.compass.z or
        this->rc.gear != rhs.rc.gear or
        this->rc.mode != rhs.rc.mode or
        this->rc.roll != rhs.rc.roll or
        this->rc.pitch != rhs.rc.pitch or
        this->rc.yaw != rhs.rc.yaw or
        this->rc.throttle != rhs.rc.throttle or
        this->positionVO.x != rhs.positionVO.x or
        this->positionVO.y != rhs.positionVO.y or
        this->positionVO.z != rhs.positionVO.z or
        this->positionVO.xHealth != rhs.positionVO.xHealth or
        this->positionVO.yHealth != rhs.positionVO.yHealth or
        this->positionVO.zHealth != rhs.positionVO.zHealth or
        this->flightAnomaly.aircraftIsFalling != rhs.flightAnomaly.aircraftIsFalling or
        this->flightAnomaly.atLeastOneEscDisconnected != rhs.flightAnomaly.atLeastOneEscDisconnected or
        this->flightAnomaly.compassInstallationError != rhs.flightAnomaly.compassInstallationError or
        this->flightAnomaly.escTemperatureHigh != rhs.flightAnomaly.escTemperatureHigh or
        this->flightAnomaly.gpsYawError != rhs.flightAnomaly.gpsYawError or
        this->flightAnomaly.heightCtrlFail != rhs.flightAnomaly.heightCtrlFail or
        this->flightAnomaly.impactInAir != rhs.flightAnomaly.impactInAir or
        this->flightAnomaly.imuInstallationError != rhs.flightAnomaly.imuInstallationError or
        this->flightAnomaly.randomFly != rhs.flightAnomaly.randomFly or
        this->flightAnomaly.reserved != rhs.flightAnomaly.reserved or
        this->flightAnomaly.rollPitchCtrlFail != rhs.flightAnomaly.rollPitchCtrlFail or
        this->flightAnomaly.strongWindLevel1 != rhs.flightAnomaly.strongWindLevel1 or
        this->flightAnomaly.strongWindLevel2 != rhs.flightAnomaly.strongWindLevel2 or
        this->flightAnomaly.yawCtrlFail != rhs.flightAnomaly.yawCtrlFail or
        this->avoidData.front != rhs.avoidData.front or
        this->avoidData.back != rhs.avoidData.back or
        this->avoidData.right != rhs.avoidData.right or
        this->avoidData.left != rhs.avoidData.left or
        this->avoidData.up != rhs.avoidData.up or
        this->avoidData.down != rhs.avoidData.down or
        this->avoidData.frontHealth != rhs.avoidData.frontHealth or
        this->avoidData.backHealth != rhs.avoidData.backHealth or
        this->avoidData.rightHealth != rhs.avoidData.rightHealth or
        this->avoidData.leftHealth != rhs.avoidData.leftHealth or
        this->avoidData.upHealth != rhs.avoidData.upHealth or
        this->avoidData.downHealth != rhs.avoidData.downHealth or
        this->avoidData.reserved != rhs.avoidData.reserved or
        this->gimbalAngles.x != rhs.gimbalAngles.x or
        this->gimbalAngles.y != rhs.gimbalAngles.y or
        this->gimbalAngles.z != rhs.gimbalAngles.z or
        this->gimbalControlMode != rhs.gimbalControlMode or
    // 10 Hz
        this->altitudeFusioned != rhs.altitudeFusioned or
        this->latLonFused.latitude != rhs.latLonFused.latitude or
        this->latLonFused.longitude != rhs.latLonFused.longitude or
        this->latLonFused.altitude != rhs.latLonFused.altitude or
        this->latLonFused.visibleSatelliteNumber != rhs.latLonFused.visibleSatelliteNumber or
        this->gpsControlLevel != rhs.gpsControlLevel or
        this->batteryInfo.capacity != rhs.batteryInfo.capacity or
        this->batteryInfo.current != rhs.batteryInfo.current or
        this->batteryInfo.percentage != rhs.batteryInfo.percentage or
        this->batteryInfo.voltage != rhs.batteryInfo.voltage or
    // 5 Hz
        this->gpsDate != rhs.gpsDate or
        this->gpsTime != rhs.gpsTime or
        this->gpsPosition.x != rhs.gpsPosition.x or
        this->gpsPosition.y != rhs.gpsPosition.y or
        this->gpsPosition.z != rhs.gpsPosition.z or
        this->gpsVelocity.x != rhs.gpsVelocity.x or
        this->gpsVelocity.y != rhs.gpsVelocity.y or
        this->gpsVelocity.z != rhs.gpsVelocity.z or
        this->gpsDetails.fix != rhs.gpsDetails.fix or
        this->gpsDetails.gnssStatus != rhs.gpsDetails.gnssStatus or
        this->gpsDetails.GPScounter != rhs.gpsDetails.GPScounter or
        this->gpsDetails.hacc != rhs.gpsDetails.hacc or
        this->gpsDetails.hdop != rhs.gpsDetails.hdop or
        this->gpsDetails.NSV != rhs.gpsDetails.NSV or
        this->gpsDetails.pdop != rhs.gpsDetails.pdop or
        this->gpsDetails.sacc != rhs.gpsDetails.sacc or
        this->gpsDetails.usedGLN != rhs.gpsDetails.usedGLN or
        this->gpsDetails.usedGPS != rhs.gpsDetails.usedGPS or
        this->gpsSignalLevel != rhs.gpsSignalLevel or
        this->controlDevice.controlMode != rhs.controlDevice.controlMode or
        this->controlDevice.deviceStatus != rhs.controlDevice.deviceStatus or
        this->controlDevice.flightStatus != rhs.controlDevice.flightStatus or
        this->controlDevice.vrcStatus != rhs.controlDevice.vrcStatus or
        this->controlDevice.reserved != rhs.controlDevice.reserved or
        this->homePointInfo.latitude != rhs.homePointInfo.latitude or
        this->homePointInfo.longitude != rhs.homePointInfo.longitude or
        this->statusFlight != rhs.statusFlight or
        this->statusDisplayMode != rhs.statusDisplayMode or
        this->statusLandingGear != rhs.statusLandingGear or
        this->statusMotorStartError != rhs.statusMotorStartError or
        this->statusRtkConnect.rtkConnected != rhs.statusRtkConnect.rtkConnected or
        this->statusRtkConnect.reserve != rhs.statusRtkConnect.reserve or
        this->statusHomePointSet.status != rhs.statusHomePointSet.status or
        this->gimbalStatus.calibrating != rhs.gimbalStatus.calibrating or
        this->gimbalStatus.disabled_mvo != rhs.gimbalStatus.disabled_mvo or
        this->gimbalStatus.droneDataRecv != rhs.gimbalStatus.droneDataRecv or
        this->gimbalStatus.escRollStatus != rhs.gimbalStatus.escRollStatus or
        this->gimbalStatus.escPitchStatus != rhs.gimbalStatus.escPitchStatus or
        this->gimbalStatus.escYawStatus != rhs.gimbalStatus.escYawStatus or
        this->gimbalStatus.FWUpdating != rhs.gimbalStatus.FWUpdating or
        this->gimbalStatus.gear_show_unable != rhs.gimbalStatus.gear_show_unable or
        this->gimbalStatus.gyroFalut != rhs.gimbalStatus.gyroFalut or
        this->gimbalStatus.initUnfinished != rhs.gimbalStatus.initUnfinished or
        this->gimbalStatus.installedDirection != rhs.gimbalStatus.installedDirection or
        this->gimbalStatus.isBusy != rhs.gimbalStatus.isBusy or
        this->gimbalStatus.mountStatus != rhs.gimbalStatus.mountStatus or
        this->gimbalStatus.prevCalibrationgResult != rhs.gimbalStatus.prevCalibrationgResult or
        this->gimbalStatus.rollLimited != rhs.gimbalStatus.rollLimited or
        this->gimbalStatus.pitchLimited != rhs.gimbalStatus.pitchLimited or
        this->gimbalStatus.yawLimited != rhs.gimbalStatus.yawLimited or
        this->gimbalStatus.reserved2 != rhs.gimbalStatus.reserved2 or
    // 5Hz RTK
        this->rtkPosition.HFSL != rhs.rtkPosition.HFSL or
        this->rtkPosition.longitude != rhs.rtkPosition.longitude or
        this->rtkPosition.latitude != rhs.rtkPosition.latitude or
        this->rtkVelocity.x != rhs.rtkVelocity.x or
        this->rtkVelocity.y != rhs.rtkVelocity.y or
        this->rtkVelocity.z != rhs.rtkVelocity.z or
        this->rtkYaw != rhs.rtkYaw or
        this->rtkPositionInfo != rhs.rtkPositionInfo or
        this->rtkYawInfo != rhs.rtkYawInfo
    ) {
        return false;
    }
    return true;
}
